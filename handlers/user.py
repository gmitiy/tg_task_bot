import datetime
import re

from telebot.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telebot.util import extract_arguments, antiflood

from bot_core import bot, test_cancel
from db import user_dao
from misc import CHAT_PASSWORD_URL, CHAT_PASSWORD, rus_day, OKAY, I_DONT_KNOW, time_to_str, TIME_RE, list_split, \
    login_to_str


# ======================================
# ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
# ======================================
@bot.message_handler(commands=['start'], auth=False)
def start_handler(message: Message):
    if CHAT_PASSWORD_URL in extract_arguments(message.text):
        user_dao.add(message.from_user.id, message.from_user.full_name, message.from_user.username)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø—É—Ç–Ω–∏–∫! –°–∫–∞–∂–∏ –ø–∞—Ä–æ–ª—å.")
        bot.register_next_step_handler(message, start_handler_step2)


def start_handler_step2(message: Message, try_cnt=1):
    if CHAT_PASSWORD.casefold() in message.text.replace('+', ' ').casefold():
        user_dao.add(message.from_user.id, message.from_user.full_name, message.from_user.username)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}")
    else:
        if try_cnt < 3:
            bot.reply_to(message, "–≠—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, start_handler_step2, try_cnt=try_cnt + 1)
        else:
            bot.reply_to(message, "–≠—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.")


# ======================================
# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ========
# ======================================
@bot.message_handler(commands=['settings'], auth=True)
def settings_handler(message: Message):
    settings = user_dao.get_user_info(message.from_user.id)
    msg = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n" \
          f"\tüîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - {'–í–∫–ª—é—á–µ–Ω—ã' if settings['notif_enable'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}.\n" \
          f"\tüîπ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –≤ {time_to_str(settings['notif_time'])}\n" \
          f"\tüîπ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∑–∞ {settings['first_notif_days']} {rus_day(settings['first_notif_days'])}.\n" \
          f"\tüîπ –í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –∑–∞ {settings['second_notif_days']} {rus_day(settings['second_notif_days'])}.\n" \
          f"\tüîπ –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö - {'–í–∫–ª—é—á–µ–Ω—ã' if not settings['small_btn'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}.\n" \
          f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ù–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö",
                 "„Ö§", "–û—Ç–º–µ–Ω–∞", row_width=2)
    bot.send_message(message.chat.id, msg, reply_markup=keyboard)
    bot.register_next_step_handler(message, settings_handler_step2)


@test_cancel
def settings_handler_step2(message: Message):
    if message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–í–∫–ª—é—á–∏—Ç—å", "–í—ã–∫–ª—é—á–∏—Ç—å", row_width=2)
        bot.send_message(message.chat.id, "–í–∫–ª—é—á–∏—Ç—å / –í—ã–∫–ª—é—á–∏—Ç—å", reply_markup=keyboard)
        bot.register_next_step_handler(message, settings_handler_step_notif)
    elif message.text == "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        bot.send_message(message.chat.id, "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?\n"
                                          "–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–ù–∞–ø—Ä–∏–º–µ—Ä 16:30)\n"
                                          "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è ¬±5 –º–∏–Ω—É—Ç",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, settings_handler_step_notif_time)
    elif message.text == "–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑? [0 - –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è]",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, settings_handler_step_notif_days, step_type="first")
    elif message.text == "–í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑? [0 - –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è]",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, settings_handler_step_notif_days, step_type="second")
    elif message.text == "–ù–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–í–∫–ª—é—á–∏—Ç—å", "–í—ã–∫–ª—é—á–∏—Ç—å", row_width=2)
        bot.send_message(message.chat.id, "–í–∫–ª—é—á–∏—Ç—å / –í—ã–∫–ª—é—á–∏—Ç—å", reply_markup=keyboard)
        bot.register_next_step_handler(message, settings_handler_step_btn)
    else:
        bot.send_message(message.chat.id, I_DONT_KNOW)
        bot.register_next_step_handler(message, settings_handler_step2)


@test_cancel
def settings_handler_step_notif_time(message: Message):
    if m := re.fullmatch(TIME_RE, message.text):
        notif_time = datetime.time(int(m.group(1)), int(m.group(2)))
        user_dao.update_notif_time(message.from_user.id, notif_time)
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.from_user.id, "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º")
        bot.register_next_step_handler(message, settings_handler_step_notif_time)


@test_cancel
def settings_handler_step_notif_days(message: Message, step_type):
    if message.text.isdigit():
        if step_type == "first":
            user_dao.update_first_notif(message.from_user.id, int(message.text))
        else:
            user_dao.update_second_notif(message.from_user.id, int(message.text))
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.from_user.id, "–ú–Ω–µ –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, settings_handler_step_notif_days, step_type=step_type)


@test_cancel
def settings_handler_step_notif(message: Message):
    if message.text == "–í–∫–ª—é—á–∏—Ç—å":
        user_dao.update_notif(message.from_user.id, True)
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å":
        user_dao.update_notif(message.from_user.id, False)
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.from_user.id, I_DONT_KNOW)
        bot.register_next_step_handler(message, settings_handler_step_notif)


@test_cancel
def settings_handler_step_btn(message: Message):
    if message.text == "–í–∫–ª—é—á–∏—Ç—å":
        user_dao.update_btn(message.from_user.id, False)
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å":
        user_dao.update_btn(message.from_user.id, True)
        bot.reply_to(message, OKAY, reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.from_user.id, I_DONT_KNOW)
        bot.register_next_step_handler(message, settings_handler_step_notif)


@bot.message_handler(commands=['users'], auth=True)
def users_handler(message: Message):
    msgs = [f"{user['name']}{login_to_str(user['login'], ' (', ')')}"
            for user in user_dao.get_all_users()]
    for msg in list_split(msgs, sep='\n'):
        antiflood(bot.send_message, message.chat.id, msg)
