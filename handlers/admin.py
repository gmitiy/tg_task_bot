from datetime import datetime

import schedule
from telebot.types import Message, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeChat, \
    ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestUser, ReplyKeyboardRemove
from telebot.util import antiflood

from bot_core import bot, test_cancel, send_message_to_user
from db import user_dao
from misc import list_split, login_to_str, SEP_LINE

start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")


# ======================================
# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º =============
# ======================================
@bot.message_handler(commands=['send_to_all'], send_to_all=True)
def send_to_all_handler(message: Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —è –ø–µ—Ä–µ—à–ª—é –≤—Å–µ–º.")
    bot.register_next_step_handler(message, send_to_all_handler_step2)


@test_cancel
def send_to_all_handler_step2(message: Message):
    bot.send_message(message.chat.id, "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö. –ü—Ä–∏—à–ª–∏ '–î–∞' –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!")
    bot.send_message(message.chat.id, message.text)
    bot.register_next_step_handler(message, send_to_all_handler_step3, msg=message.text)


@test_cancel
def send_to_all_handler_step3(message: Message, msg):
    if message.text.lower() == "–¥–∞":
        for user_id in user_dao.get_all_users_id_except(message.from_user.id):
            send_message_to_user(user_id, msg)
        antiflood(bot.send_message, message.chat.id, "–í—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª.")
    else:
        bot.send_message(message.chat.id, "–ù—É –Ω–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç.")


# ======================================
# ============== –ê–¥–º–∏–Ω =================
# ======================================
@bot.message_handler(commands=['update_commands'], admin=True)
def update_commands_handler(message: Message):
    default_commands = [
        BotCommand('tasks', '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏'),
        BotCommand('add', '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'),
        BotCommand('from_tasks', '–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∑–∞–¥–∞—á–∏'),
        BotCommand('all_my_tasks', '–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏'),
        BotCommand('all_from_tasks', '–í—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∑–∞–¥–∞—á–∏'),
        BotCommand('all_tasks', '–í–æ–æ–±—â–µ –≤—Å–µ –∑–∞–¥–∞—á–∏'),
        BotCommand('delete_task', '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É'),
        BotCommand('settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        BotCommand('users', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        BotCommand('cancel', '–ü—Ä–µ—Ä–≤–∞—Ç—å –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é'),
        BotCommand('dice', '–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ d6 ([/dice N] - –∫–∏–Ω—É—Ç—å N –∫—É–±–∏–∫–æ–≤)')
    ]

    can_post_commands = [
        BotCommand('send_to_all', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º')
    ]

    admin_commands = [
        BotCommand('update_commands', '–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é'),
        BotCommand('set_can_post', '–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'),
        BotCommand('list_users', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (adm)'),
        BotCommand('plan', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
    ]

    bot.set_my_commands(default_commands, BotCommandScopeAllPrivateChats())

    for user in user_dao.get_all_users():
        commands = default_commands.copy()
        if user['can_post']:
            commands += can_post_commands
        if user['is_admin']:
            commands += admin_commands
        if len(commands) != len(default_commands):
            antiflood(bot.set_my_commands, commands, BotCommandScopeChat(user['user_id']))

    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ.")


@bot.message_handler(commands=['set_can_post'], admin=True)
def set_can_post_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–°–µ–±–µ")
    keyboard.add(KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_user=KeyboardButtonRequestUser(1)))
    bot.send_message(message.chat.id, "–ö–æ–º—É –±—É–¥–µ–º –¥–∞–≤–∞—Ç—å (–æ—Ç–±–∏—Ä–∞—Ç—å) –ø—Ä–∞–≤–∞?", reply_markup=keyboard)
    bot.register_next_step_handler(message, set_can_post_handler_step2)


@test_cancel
def set_can_post_handler_step2(message: Message):
    if message.text == "–°–µ–±–µ":
        user_id = message.from_user.id
    elif message.content_type == 'user_shared':
        user_id = message.user_shared.user_id
    else:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, set_can_post_handler_step2)
        return

    user = user_dao.get_user_info(user_id)
    if not user:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞–∫–æ–º —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º.", reply_markup=ReplyKeyboardRemove())
        return

    if user['can_post']:
        user_dao.update_can_post(user_id, False)
        bot.send_message(message.chat.id, f"–û—Ç–æ–±—Ä–∞–ª –ø—Ä–∞–≤–∞ —É {user['name']}", reply_markup=ReplyKeyboardRemove())
    else:
        user_dao.update_can_post(user_id, True)
        bot.send_message(message.chat.id, f"–í—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –¥–ª—è {user['name']}", reply_markup=ReplyKeyboardRemove())

    bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é /update_commands", reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['list_users'], admin=True)
def list_users_handler(message: Message):
    msgs = [f"{login_to_str(user['login'], '[', '] - ')}{user['name']} "
            f"{'üîà' if user['notif_enable'] else 'üîá'} "
            f"{'üñå' if user['can_post'] else ''} "
            f"{'‚öôÔ∏è' if user['is_admin'] else ''}"
            for user in user_dao.get_all_users()]
    for msg in list_split(msgs, sep='\n'):
        antiflood(bot.send_message, message.chat.id, msg)


@bot.message_handler(commands=['plan'], admin=True)
def plan_handler(message: Message):
    try:
        msgs = [f'Server time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nBot start time: {start_time}'] + \
               [repr(job) for job in schedule.get_jobs()]
        for msg in list_split(msgs, sep=SEP_LINE):
            antiflood(bot.send_message, message.chat.id, msg)
    except Exception as e:
        bot.send_message(message.chat.id, f"Error: {str(e)}")
