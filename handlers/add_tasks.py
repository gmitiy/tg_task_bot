import datetime
import re

from dateutil import parser
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, KeyboardButtonRequestUser, \
    ReplyKeyboardRemove

from bot_core import bot, test_cancel, call_admin, send_message_to_user
from db import task_dao, user_dao
from misc import date_to_str, CHAT_PASSWORD_URL, TaskTo, DATE_RE, BOT_NAME, TaskState


# ======================================
# ========== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ =========
# ======================================
@bot.message_handler(commands=['add'], auth=True)
def task_add_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–°–µ–±–µ")
    keyboard.add(KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_user=KeyboardButtonRequestUser(1)))
    bot.send_message(message.chat.id, "–ö–æ–º—É –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    bot.register_next_step_handler(message, task_add_handler_user)


@test_cancel
def task_add_handler_user(message: Message):
    if message.text == "–°–µ–±–µ":
        user_id = message.from_user.id
    elif message.content_type == 'user_shared':
        user_id = message.user_shared.user_id
    else:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        bot.register_next_step_handler(message, task_add_handler_user)
        return

    if not user_dao.user_exists(user_id):
        bot.send_message(message.chat.id, f"–Ø –Ω–µ –∑–Ω–∞–∫–æ–º —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º\\.\n"
                                          f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ–≥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∏—Ç—å –µ–º—É –∑–∞–¥–∞—á–∏\\.\n"
                                          f"[–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ](https://t.me/{BOT_NAME}?start={CHAT_PASSWORD_URL})",
                         parse_mode='MarkdownV2',
                         reply_markup=ReplyKeyboardRemove())
        return

    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏.", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, task_add_handler_caption, task_to=TaskTo(message.from_user.id, user_id))


@test_cancel
def task_add_handler_caption(message: Message, task_to: TaskTo):
    task_to.caption = message.text
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
    bot.register_next_step_handler(message, task_add_handler_content, task_to=task_to)


@test_cancel
def task_add_handler_content(message: Message, task_to: TaskTo):
    task_to.content = message.text
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –¥–∞—Ç—É –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\\.\n"
                                      "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ __–¥–¥\\.–º–º\\.–≥–≥–≥–≥__ \\(–ü—Ä–∏–º–µ—Ä: _01\\.05\\.2023_\\)\n"
                                      "–ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ –ø—Ä–∏—à–ª–∏ '\\-'",
                     parse_mode='MarkdownV2')
    bot.register_next_step_handler(message, task_add_handler_end_date, task_to=task_to)


@test_cancel
def task_add_handler_end_date(message: Message, task_to: TaskTo):
    if re.fullmatch(DATE_RE, message.text):
        try:
            task_to.end_date = parser.parse(message.text.replace(',', '.'), dayfirst=True)
        except Exception:
            call_admin(message.chat.id)
            return

    elif message.text != '-':
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ __–¥–¥\\.–º–º\\.–≥–≥–≥–≥__", parse_mode='MarkdownV2')
        bot.register_next_step_handler(message, task_add_handler_end_date, task_to=task_to)
        return

    if not task_to.end_date or task_to.end_date >= datetime.datetime.today():

        if task_dao.get_user_tasks_count(task_to.to_user_id) >= 200:
            if task_to.from_user_id == task_to.to_user_id:
                bot.send_message(message.chat.id, "–£ —Ç–µ–±—è —É–∂–µ 200 –∑–∞–¥–∞—á, –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è.\n"
                                                  "–£–¥–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.")
            else:
                bot.send_message(message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ 200 –∑–∞–¥–∞—á, –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è.\n"
                                                  "–ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.")
                send_message_to_user(task_to.to_user_id,
                                     "üîî\n"
                                     "–¢–µ–±–µ —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ —Ç–∞–∫-–∫–∞–∫ —É —Ç–µ–±—è —É–∂–µ 200 –∑–∞–¥–∞—á.\n"
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
            return

        msg = f"üîî\n" \
              f"{TaskState.get_ico(TaskState.CREATED)} –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç {message.from_user.full_name}\n" \
              f"\n" \
              f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {task_to.caption}\n" \
              f"\n" \
              f"{task_to.content}\n" \
              f"\n" \
              f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: {date_to_str(task_to.end_date)}"

        if task_to.from_user_id == task_to.to_user_id or send_message_to_user(task_to.to_user_id, msg):
            task_dao.add_task(task_to)
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.\n"
                                              "–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.")
    else:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º.")
        bot.register_next_step_handler(message, task_add_handler_end_date, task_to=task_to)
